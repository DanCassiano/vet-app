{"ast":null,"code":"import axios from \"axios\";\nimport { LOAD_USER, SUCCESS_USER, ERROR_USER, AUTHETICATE_USER, FETCH_ANIMALS, CREATE_USER, LOAD_PESSOA, SUCESS_PESSOA, ERROR_PESSOA, CREATE_PESSOA, CREATE_ANIMAL, LOAD_ANIMALS, SUCESS_ANIMALS, ERROR_ANIMALS } from \"../constants\";\nimport { toast } from \"react-toastify\";\nconst host = 'http://localhost:5001/';\nconst API = axios.create({\n  baseURL: \"http://localhost:5001\"\n});\nexport const fetchAnimals = () => {\n  return dispatch => {\n    dispatch({\n      type: LOAD_ANIMALS\n    });\n    API.get(\"/animais\").then(res => {\n      const {\n        data\n      } = res;\n      dispatch({\n        type: FETCH_ANIMALS,\n        payload: data\n      });\n      dispatch({\n        type: SUCESS_ANIMALS\n      });\n    }).catch(() => dispatch({\n      type: ERROR_ANIMALS\n    }));\n  };\n};\nexport const userAuthenticate = data => {\n  console.log('data', data);\n  return dispatch => {\n    dispatch({\n      type: LOAD_USER\n    });\n    API.post(`${host}register/authenticate`, { ...data\n    }).then(({\n      data\n    }) => {\n      dispatch({\n        type: AUTHETICATE_USER,\n        payload: data\n      });\n      dispatch({\n        type: SUCCESS_USER\n      });\n      toast.success(\"Voce Logou com sucesso\");\n      localStorage.setItem(\"user@authentication\", JSON.stringify(data));\n    }).catch(error => {\n      dispatch({\n        type: ERROR_USER\n      });\n      toast.error(\"Não Foi Possivel Logar\");\n      return {\n        error\n      };\n    });\n  };\n};\nexport const createUser = data => {\n  return dispatch => {\n    dispatch({\n      type: LOAD_USER\n    });\n    API.post(`${host}register`, { ...data\n    }).then(({\n      data\n    }) => {\n      toast.success(\"Animal cadastrado com sucesso\");\n      dispatch({\n        type: CREATE_USER,\n        payload: data\n      });\n      dispatch({\n        type: SUCCESS_USER\n      });\n    }).catch(error => {\n      dispatch({\n        type: ERROR_USER\n      });\n      toast.error(\"Não foi possivel criar o usuario\");\n      return {\n        error\n      };\n    });\n  };\n};\nexport const creatPessoa = data => {\n  data.telefone = console.log('data.telefone', data.telefone);\n  console.log('data.cep', data.cep);\n  console.log('data.cpf', data.cpf);\n  return dispatch => {\n    dispatch({\n      type: LOAD_PESSOA\n    });\n    API.post(`${host}pessoas`, { ...data\n    }).then(({\n      data\n    }) => {\n      toast.success(\"Cadastrado com sucesso\");\n      dispatch({\n        type: CREATE_PESSOA,\n        payload: data\n      });\n      dispatch({\n        type: SUCESS_PESSOA\n      });\n    }).catch(error => {\n      dispatch({\n        type: ERROR_PESSOA\n      });\n      toast.error(\"Não foi possivel cadastrar\");\n      return {\n        error\n      };\n    });\n  };\n};\nexport const creatAnimal = data => {\n  return dispatch => {\n    dispatch({\n      type: LOAD_ANIMALS\n    });\n    API.post(`${host}animais`, { ...data\n    }).then(({\n      data\n    }) => {\n      toast.success(\"Cadastrado com sucesso\");\n      dispatch({\n        type: CREATE_ANIMAL,\n        payload: data\n      });\n      dispatch({\n        type: SUCESS_ANIMALS\n      });\n    }).catch(error => {\n      dispatch({\n        type: ERROR_ANIMALS\n      });\n      toast.error(\"Não foi possivel cadastrar\");\n      return {\n        error\n      };\n    });\n  };\n};","map":{"version":3,"sources":["/home/andrews_souza/Projects/vet-app/src/redux/actions/index.js"],"names":["axios","LOAD_USER","SUCCESS_USER","ERROR_USER","AUTHETICATE_USER","FETCH_ANIMALS","CREATE_USER","LOAD_PESSOA","SUCESS_PESSOA","ERROR_PESSOA","CREATE_PESSOA","CREATE_ANIMAL","LOAD_ANIMALS","SUCESS_ANIMALS","ERROR_ANIMALS","toast","host","API","create","baseURL","fetchAnimals","dispatch","type","get","then","res","data","payload","catch","userAuthenticate","console","log","post","success","localStorage","setItem","JSON","stringify","error","createUser","creatPessoa","telefone","cep","cpf","creatAnimal"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {\n  LOAD_USER,\n  SUCCESS_USER,\n  ERROR_USER,\n  AUTHETICATE_USER,\n  FETCH_ANIMALS,\n  CREATE_USER,\n  LOAD_PESSOA,\n  SUCESS_PESSOA,\n  ERROR_PESSOA,\n  CREATE_PESSOA,\n  CREATE_ANIMAL,\n  LOAD_ANIMALS,\n  SUCESS_ANIMALS,\n  ERROR_ANIMALS\n\n} from \"../constants\";\n\nimport { toast } from \"react-toastify\";\n\nconst host = 'http://localhost:5001/'\n\nconst API = axios.create({\n  baseURL: \"http://localhost:5001\",\n});\n\nexport const fetchAnimals = () => {\n  return (dispatch) => {\n    dispatch({\n      type: LOAD_ANIMALS\n    });\n\n    API.get(\"/animais\")\n      .then(res => {\n        const { data } = res\n        dispatch({\n          type: FETCH_ANIMALS,\n          payload: data,\n        });\n        dispatch({\n          type: SUCESS_ANIMALS\n        })\n      })\n      .catch(() => (\n\n        dispatch({\n          type: ERROR_ANIMALS\n        })\n      ));\n  };\n};\n\nexport const userAuthenticate = (data) => {\n    console.log('data', data)\n  return (dispatch) => {\n    dispatch({\n      type: LOAD_USER\n    })\n    API.post(`${host}register/authenticate`, { ...data }).then(({ data }) => {\n      \n      dispatch({\n        type: AUTHETICATE_USER,\n        payload: data\n      })\n      dispatch({\n        type: SUCCESS_USER\n      })\n      toast.success(\"Voce Logou com sucesso\")\n      localStorage.setItem(\"user@authentication\",JSON.stringify(data))\n    }).catch((error) => {\n      dispatch({\n        type: ERROR_USER\n      })\n      toast.error(\"Não Foi Possivel Logar\")\n      return {\n        error\n      }\n    })\n  };\n};\n\nexport const createUser = (data) => {\n\n  return (dispatch) => {\n    dispatch({\n      type: LOAD_USER\n    })\n    API.post(`${host}register`, { ...data }).then(({ data }) => {\n      toast.success(\"Animal cadastrado com sucesso\")\n      dispatch({\n        type: CREATE_USER,\n        payload: data\n      })\n\n\n      dispatch({\n        type: SUCCESS_USER\n      })\n\n\n    }).catch((error) => {\n      dispatch({\n        type: ERROR_USER\n      })\n      toast.error(\"Não foi possivel criar o usuario\")\n      return {\n        error\n      }\n    })\n  };\n};\n\nexport const creatPessoa = (data) => {\n  data.telefone = \n  console.log('data.telefone',data.telefone)\n  console.log('data.cep',data.cep)\n  console.log('data.cpf',data.cpf)\n  return (dispatch) => {\n    dispatch({\n      type: LOAD_PESSOA\n    });\n\n    API.post(`${host}pessoas`, { ...data }).then(({ data }) => {\n      toast.success(\"Cadastrado com sucesso\")\n      dispatch({\n        type: CREATE_PESSOA,\n        payload: data\n      })\n\n      dispatch({\n        type: SUCESS_PESSOA\n      })\n\n    }).catch((error) => {\n      dispatch({\n        type: ERROR_PESSOA\n      })\n      toast.error(\"Não foi possivel cadastrar\")\n      return { error }\n    })\n  };\n};\n\nexport const creatAnimal = (data) => {\n\n  return (dispatch) => {\n    dispatch({\n      type: LOAD_ANIMALS\n    });\n\n    API.post(`${host}animais`, { ...data }).then(({ data }) => {\n      toast.success(\"Cadastrado com sucesso\")\n      dispatch({\n        type: CREATE_ANIMAL,\n        payload: data\n      })\n\n      dispatch({\n        type: SUCESS_ANIMALS\n      })\n\n    }).catch((error) => {\n      dispatch({\n        type: ERROR_ANIMALS\n      })\n      toast.error(\"Não foi possivel cadastrar\")\n      return { error }\n    })\n  };\n};\n\n"]},"metadata":{},"sourceType":"module"}